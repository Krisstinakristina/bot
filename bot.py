# -*- coding: utf-8 -*-
import telebot
import os
from dotenv import load_dotenv
from telebot import types
from openai import OpenAI
import json
import yookassa
from datetime import datetime
import pytesseract
from PIL import Image
import io
import re

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID')
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY')
ADMIN_ID = os.getenv('ADMIN_ID', '')

bot = telebot.TeleBot(BOT_TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SUBSCRIPTION_PRICE = 200
TOKENS_PER_PAYMENT = 25000

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_storage = {}

genres = {
    'A': '–ú–∏—Ñ–æ–ª–æ–≥–∏—è',
    'B': '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ',
    'C': '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
    'D': '–î–µ—Ç–µ–∫—Ç–∏–≤',
    'E': '–°–∫–∞–∑–∫–∞'
}

morals = {
    '1': '–î–æ–±—Ä–æ—Ç–∞',
    '2': '–ß–µ—Å—Ç–Ω–æ—Å—Ç—å',
    '3': '–¢–µ—Ä–ø–µ–ª–∏–≤–æ—Å—Ç—å',
    '4': '–°–µ–º—å—è –≤–∞–∂–Ω–∞',
    '5': '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å'
}

def get_user_data(user_id):
    if user_id not in user_data_storage:
        user_data_storage[user_id] = {
            'user_id': user_id,
            'subscription_type': 'none',
            'available_tokens': 0,
            'subscription_expiry_date': None,
            'pending_payment_code': None
        }
    return user_data_storage[user_id]

def update_user_data(user_id, data):
    user_data_storage[user_id] = data

client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com")

def generate_payment_code(user_id):
    return f"SKZ-{user_id}-{datetime.now().strftime('%d%H')}"

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
def normalize_text(text):
    text = text.lower()
    text = re.sub(r'[^–∞-—èa-z0-9\s]', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
def validate_payment(text, payment_code, amount):
    normalized_text = normalize_text(text)
    code_pattern = re.escape(payment_code.lower())
    amount_pattern = r'200(\s|—Ä|—Ä—É–±|—Ä—É–±–ª–µ–π)'
    date_pattern = r'\d{1,2}\s?[\.\/]\s?\d{1,2}\s?[\.\/]\s?\d{2,4}'
    
    code_found = re.search(code_pattern, normalized_text) is not None
    amount_found = re.search(amount_pattern, normalized_text) is not None
    date_found = re.search(date_pattern, text) is not None  # –ò—â–µ–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    
    return code_found and amount_found and date_found

@bot.message_handler(commands=['start'])
def start(message):
    user = get_user_data(message.from_user.id)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if user['available_tokens'] <= 0:
        markup.add(types.KeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
    else:
        markup.add(types.KeyboardButton("üìñ –°–æ–∑–¥–∞—Ç—å —Å–∫–∞–∑–∫—É"))
    
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–∫–∞–∑–æ—á–Ω–∏–∫. –ó–∞ {SUBSCRIPTION_PRICE}‚ÇΩ —Ç—ã –ø–æ–ª—É—á–∏—à—å {TOKENS_PER_PAYMENT} —Ç–æ–∫–µ–Ω–æ–≤ (~20-25 —Å–∫–∞–∑–æ–∫).\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "üìñ –°–æ–∑–¥–∞—Ç—å —Å–∫–∞–∑–∫—É")
def create_story(message):
    user = get_user_data(message.from_user.id)
    if user['available_tokens'] <= 0:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(name) for name in genres.values()]
    markup.add(*buttons)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä —Å–∫–∞–∑–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, process_genre_selection)

def process_genre_selection(message):
    if message.text not in genres.values():
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return create_story(message)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(name) for name in morals.values()]
    markup.add(*buttons)
    
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ—Ä–∞–ª—å:", reply_markup=markup)
    bot.register_next_step_handler(message, process_moral_selection, selected_genre=message.text)

def process_moral_selection(message, selected_genre):
    if message.text not in morals.values():
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ—Ä–∞–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return create_story(message)
    
    msg = bot.send_message(message.chat.id, "üßô –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –≥–µ—Ä–æ–µ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ò–≤–∞–Ω, –ú–∞—Ä—å—è, –Ω–∞–π—Ç–∏ –≤–æ–ª—à–µ–±–Ω—ã–π —Ü–≤–µ—Ç–æ–∫'):")
    bot.register_next_step_handler(msg, generate_fairy_tale, genre=selected_genre, moral=message.text)

def generate_fairy_tale(message, genre, moral):
    characters_and_action = message.text
    
    try:
        prompt = f"–ù–∞–ø–∏—à–∏ {genre.lower()} —Å–∫–∞–∑–∫—É —Å –≥–µ—Ä–æ—è–º–∏: {characters_and_action}. "
        prompt += f"–ú–æ—Ä–∞–ª—å —Å–∫–∞–∑–∫–∏: '{moral}'. "
        prompt += "–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫, 3-5 –∞–±–∑–∞—Ü–µ–≤."
        
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=[{"role": "user", "content": prompt}]
        )
        
        user = get_user_data(message.from_user.id)
        user['available_tokens'] -= 1000
        update_user_data(message.from_user.id, user)
        
        bot.send_message(message.chat.id, response.choices[0].message.content)
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        print(f"Generation error: {e}")

@bot.message_handler(func=lambda message: message.text == "üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
def buy_subscription(message):
    user_id = message.from_user.id
    user = get_user_data(user_id)
    
    payment_code = generate_payment_code(user_id)
    user['pending_payment_code'] = payment_code
    update_user_data(user_id, user)
    
    instructions = (
        f"üìå –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {SUBSCRIPTION_PRICE}‚ÇΩ –Ω–∞ –ÆMoney\n"
        f"2. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ: {payment_code}\n"
        f"3. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞\n\n"
        f"‚ùó –í–∞–∂–Ω–æ: –∫–æ–¥ {payment_code} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\n"
        f"‚ùó –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π ({datetime.now().strftime('%d.%m.%Y')})"
    )
    
    bot.send_message(
        message.chat.id,
        instructions,
        reply_markup=types.ForceReply(selective=False)
    )

@bot.message_handler(content_types=['photo'])
def handle_payment_screenshot(message):
    user_id = message.from_user.id
    user = get_user_data(user_id)
    
    if not user.get('pending_payment_code'):
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        img = Image.open(io.BytesIO(downloaded_file))
        
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        custom_config = r'--oem 3 --psm 6 -l rus+eng'
        try:
            text = pytesseract.image_to_string(img, config=custom_config)
            print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        except Exception as e:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç.")
            print(f"OCR Error: {e}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        if validate_payment(text, user['pending_payment_code'], SUBSCRIPTION_PRICE):
            user['available_tokens'] += TOKENS_PER_PAYMENT
            user['pending_payment_code'] = None
            update_user_data(user_id, user)
            
            bot.reply_to(
                message,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à –±–∞–ª–∞–Ω—Å: {user['available_tokens']} —Ç–æ–∫–µ–Ω–æ–≤."
            )
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("üìñ –°–æ–∑–¥–∞—Ç—å —Å–∫–∞–∑–∫—É"))
            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=markup
            )
            
            if ADMIN_ID:
                bot.send_message(
                    ADMIN_ID,
                    f"–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç @{message.from_user.username}\n"
                    f"ID: {user_id}\n"
                    f"–¢–æ–∫–µ–Ω–æ–≤: {user['available_tokens']}"
                )
        else:
            bot.reply_to(
                message,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                f"- –ö–æ–¥ {user['pending_payment_code']}\n"
                f"- –°—É–º–º–∞ {SUBSCRIPTION_PRICE}‚ÇΩ\n"
                f"- –î–∞—Ç–∞ {datetime.now().strftime('%d.%m.%Y')}\n"
                f"- –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ"
            )
            
    except Exception as e:
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        print(f"Screenshot Error: {e}")

@bot.message_handler(commands=['tesseract_test'])
def test_tesseract(message):
    try:
        version = pytesseract.get_tesseract_version()
        bot.reply_to(message, f"‚úÖ Tesseract —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–µ—Ä—Å–∏—è: {version}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\nTesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long-polling...")
    bot.infinity_polling()